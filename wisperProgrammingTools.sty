\ProvidesExplPackage {wisperProgrammingTools}
  {2019-10-01} {0.1}
  {Some features that l3kernel is missing.}

% \__wisper_strlist_if_in:nn, code is very similar to \__prop_if_in [[[1
% in contrast to \clist_if_in:nn, this is expandable
\prg_new_conditional:Npnn \__wisper_strlist_if_in:nn #1#2 { p, T, F, TF }
  {
    \__wisper_strlist_if_in:nww { #2 } #1 , #2 , \q_recursion_tail
    \__prg_break_point:
  }
\cs_new:Npn \__wisper_strlist_if_in:nww #1 #2 ,
  {
    \str_if_eq:nnTF {#1} {#2}
      { \__wisper_strlist_if_in:N }
      { \__wisper_strlist_if_in:nww {#1} }
  }
\cs_new:Npn \__wisper_strlist_if_in:N #1
  {
    \if_meaning:w \q_recursion_tail #1
      \prg_return_false:
    \else:
      \prg_return_true:
    \fi:
    \__prg_break:
  }
\cs_generate_variant:Nn \__wisper_strlist_if_in:nnTF { nVTF }
\cs_generate_variant:Nn \__wisper_strlist_if_in_p:nn { nV }

% \__wisper_if_engine:n, allows checking if on any of the given engines [[[1
\prg_new_conditional:Npnn \__wisper_if_engine:n #1 { p, T, F, TF }
  {
    \__wisper_strlist_if_in:nVTF {#1} \c_sys_engine_str
    %\clist_if_in:nVTF {#1} \c_sys_engine_str
      { \prg_return_true: }
      { \prg_return_false: }
  }
\cs_generate_variant:Nn \__wisper_if_engine:nTF { vTF }
\cs_generate_variant:Nn \__wisper_if_engine_p:n { v }

% \__wisper_switch_engine:n switch statement, code mostly borrowed from \__str_case:nnTF [[[1
\cs_new:Npn \__wisper_switch_engine:n #1
  {
    \exp:w
    \__wisper_switch_engine_aux:nTF {#1} { } { }
  }
\cs_new:Npn \__wisper_switch_engine:nT #1#2
  {
    \exp:w
    \__wisper_switch_engine_aux:nTF {#1} {#2} { }
  }
\cs_new:Npn \__wisper_switch_engine:nF #1
  {
    \exp:w
    \__wisper_switch_engine_aux:nTF {#1} { }
  }
\cs_new:Npn \__wisper_switch_engine:nTF #1
  {
    \exp:w
    \__wisper_switch_engine_aux:nTF {#1}
  }

\cs_new:Npn \__wisper_switch_engine_aux:nTF #1#2#3
  { \__wisper_switch_engine_aux:VnTF \c_sys_engine_str {#1} {#2} {#3} }
\cs_new:Npn \__wisper_switch_engine_aux:nnTF #1#2#3#4
  { \__wisper_switch_engine:nw {#1} #2 {#1} { } \q_mark {#3} \q_mark {#4} \q_stop }
\cs_generate_variant:Nn \__wisper_switch_engine_aux:nnTF { VnTF }
\cs_new:Npn \__wisper_case_end:nw #1#2#3 \q_mark #4#5 \q_stop
  { \exp_end: #1 #4 }
\cs_new:Npn \__wisper_switch_engine:nw #1#2#3
  {
    \__wisper_strlist_if_in:nnTF {#2} {#1}
      { \__wisper_case_end:nw {#3} }
      { \__wisper_switch_engine:nw {#1} }
  }


\makeatletter
% Conditional for the document class.   [[[1
\cs_new:Npn \__wisper_if_document_class_aux:n #1
  {
    % No match
    \quark_if_nil:nTF { #1 }
      { \clist_map_break:n { \prg_return_false: } }
      {
        % Recurse for aliases
        \str_if_eq:nnTF { #1 } { koma }
          {
            % koma is an alias for any KOMA-script class
            \__wisper_if_document_class:nT { scrartcl, scrbook, scrreprt, scrlttr2 }
              { \clist_map_break:n { \prg_return_true: } }
          }
          {
            % Match
            \@ifclassloaded{#1}
              { \clist_map_break:n { \prg_return_true: } }
          }
      }
  }
\makeatother
\prg_new_conditional:Npnn \__wisper_if_document_class:n #1 { p, T, F, TF }
  { 
    % For some reason, not wrapping \q_nil in braces doesn't properly store it
    % in the clist and breaks the whole mapping
    \clist_map_function:nN { #1 , {\q_nil} } \__wisper_if_document_class_aux:n
  }
\cs_generate_variant:Nn \__wisper_if_document_class:nTF { vTF }
\cs_generate_variant:Nn \__wisper_if_document_class_p:n { v }

\cs_new_eq:NN \IfDocClassT \__wisper_if_document_class:nT
\cs_new_eq:NN \IfDocClassF \__wisper_if_document_class:nF
\cs_new_eq:NN \IfDocClassTF \__wisper_if_document_class:nTF


\makeatletter
\prg_new_conditional:Npnn \__wisper_if_twoside: { p, T, F, TF }
  {
    \if@twoside
      \prg_return_true:
    \else
      \prg_return_false:
    \fi
  }
\makeatother


% Peeking ahead [[[1
\prg_new_conditional:Npnn \__wisper_peek_charcode_any_ignore_spaces:n #1 { T, F, TF }
  {
    \exp_args:No \peek_charcode_ignore_spaces:NTF \tl_head:w #1 \q_stop 
      { \prg_return_true: }
      {
        \tl_if_single:nTF  {#1}
          { \prg_return_false: }
          {
            \__wisper_peek_charcode_any_ignore_spaces:nTF \tl_tail:n {#1}
              { \prg_return_true: } { \prg_return_false: }
          }
      }
  }

% Old, unused code [[[1
\cs_new:Npn \__wisper_prop_keys_to_clist:NN #1#2
  {
    \clist_clear:N #2
    \prop_map_inline:Nn #1 { \clist_put_right:Nn #2 {##1} }
  }
\cs_generate_variant:Nn \__wisper_prop_keys_to_clist:NN { cN }

\cs_new:Npn \__wisper_build_clist_from_prop:NN #1#2
  {
    \__wisper_if_debug:nT { loader }
      { \prop_show:N #1 }

    \prop_map_inline:Nn #1
      {
        \tl_if_novalue:nTF {##2}
          { \clist_put_right:Nn #2 {##1} }
          { \clist_put_right:Nn #2 {##1=##2} }
      }
  }

% vim: ft=tex ts=2 sw=2 et fdm=marker fmr=[[[,]]]:
